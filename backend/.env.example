# vod-tender backend environment example
# Copy to backend/.env and fill in real secrets (do NOT commit real credentials)

# --- Twitch Chat / OAuth (user access token for chat) ---
TWITCH_CHANNEL=your_channel_name
TWITCH_BOT_USERNAME=your_bot_username
TWITCH_OAUTH_TOKEN=

# --- Twitch Application Credentials (for app & auth code flow) ---
TWITCH_CLIENT_ID=your_twitch_app_client_id
TWITCH_CLIENT_SECRET=your_twitch_app_client_secret
TWITCH_REDIRECT_URI=http://vod-api.onnwee.me/auth/twitch/callback
TWITCH_SCOPES=chat:read chat:edit

# --- VOD Context ---
TWITCH_VOD_ID=123456789
TWITCH_VOD_START=2025-08-12T19:03:00Z
about:blank#blocked
# --- Database & Storage ---
# Postgres DSN (matches docker-compose service 'postgres')
DB_DSN=postgres://vod:vod@postgres:5432/vod?sslmode=disable
DATA_DIR=data

# --- YouTube (optional future integration) ---
YT_CREDENTIALS_FILE=
YT_CREDENTIALS_JSON=
YT_TOKEN_FILE=
YT_TOKEN_JSON=

# YouTube OAuth
YT_CLIENT_ID=155116792881-rn4psagti4d0go5buc809p5gk6ore8lt.apps.googleusercontent.com
YT_CLIENT_SECRET=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
YT_REDIRECT_URI=https://vod-api.onnwee.me/auth/youtube/callback
# Comma separated scopes (joined into space list) or leave blank to use default upload scope
YT_SCOPES=
# TY_AIzaSyDPpjIGynYvzcFmfyHkZ0L07hb7fNw9hjQ
# --- Server (optional) ---
# HTTP_ADDR=:8080

# Guidance:
# 1. Run backend, visit /auth/twitch/start to authorize and store tokens.
# 2. Chat uses TWITCH_OAUTH_TOKEN if set; otherwise loads stored token from DB.
# 3. Keep real .env out of version control.
